import { HooksAction } from '../constants/byEndpoint/hooks/HooksAction';
import { HOOK_EVENT_TYPES, HOOK_REQUEST_METHODS } from '../constants/byEndpoint/hooks';
declare type HooksBaseParams<A extends HooksAction> = {
    action: A;
};
export declare type HooksParams = HooksReadParams | HooksSubscribeParams | HooksUnsubscribeParams;
export declare type HooksReadParams = HooksBaseParams<HooksAction.Read>;
export declare type HookEventType = (typeof HOOK_EVENT_TYPES)[number];
export declare type HookRequestMethod = (typeof HOOK_REQUEST_METHODS)[number];
export declare type HooksSubscribeParams = HooksBaseParams<HooksAction.Subscribe> & Omit<Hook, 'id' | 'created' | 'request_method'> & {
    request_method?: HookRequestMethod;
};
export declare type HooksUnsubscribeParams = HooksBaseParams<HooksAction.Unsubscribe> & {
    id: number;
};
export declare type HooksResponse = HooksReadSuccessResponse | HooksReadResponse<false> | HooksSubscribeSuccessResponse | HooksSubscribeErrorResponse | HooksUnsubscribeResponse;
declare type HooksReadResponse<B extends boolean> = {
    success: B;
};
export declare type Hook = {
    created: string;
    event_type: HookEventType;
    id: string;
    request_method: HookRequestMethod;
    target_url: string;
};
export declare type HooksReadSuccessResponse = HooksReadResponse<true> & {
    hooks: Hook[];
};
declare type HooksSubscribeResponse<B extends boolean> = {
    success: B;
};
export declare type HooksSubscribeSuccessResponse = HooksSubscribeResponse<true> & {
    id: number;
};
export declare type HooksSubscribeErrorResponse = HooksSubscribeResponse<false>;
export declare type HooksUnsubscribeResponse = {
    success: boolean;
};
export {};
